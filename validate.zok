import "utils/pack/pack128.zok" as pack128
import "utils/pack/unpack128.zok" as unpack128
import "hashes/sha256/1024bit.zok" as sha256for1024
import "./sha256only.zok" as sha256only
import "./getHexLength.zok" as getHexLength

def toBigEndian(field[32] value) -> (field[32]):
    return [ \
            ...value[24..32], \
            ...value[16..24], \
            ...value[8..16], \
            ...value[0..8]]

def toBigEndian(field[24] value) -> (field[24]):
    return [ \
            ...value[16..24], \
            ...value[8..16], \
            ...value[0..8]]

def toBigEndian(field[128] value) -> (field[128]):
    return [ \
            ...value[120..128], \
            ...value[112..120], \
            ...value[104..112], \
            ...value[96..104], \
            ...value[88..96], \
            ...value[80..88], \
            ...value[72..80], \
            ...value[64..72], \
            ...value[56..64], \
            ...value[48..56], \
            ...value[40..48], \
            ...value[32..40], \
            ...value[24..32], \
            ...value[16..24], \
            ...value[8..16], \
            ...value[0..8]]

def packMaxVariance(field length) -> (field):
    field result = 0
    result = if length == 1 then pack128([...[0; 124], ...[1; 4]]) else result fi
    result = if length == 2 then pack128([...[0; 120], ...[1; 8]]) else result fi
    result = if length == 3 then pack128([...[0; 116], ...[1; 12]]) else result fi
    result = if length == 4 then pack128([...[0; 112], ...[1; 16]]) else result fi
    result = if length == 5 then pack128([...[0; 108], ...[1; 20]]) else result fi
    result = if length == 6 then pack128([...[0; 104], ...[1; 24]]) else result fi
    result = if length == 7 then pack128([...[0; 100], ...[1; 28]]) else result fi
    result = if length == 8 then pack128([...[0; 96], ...[1; 32]]) else result fi
    result = if length == 9 then pack128([...[0; 92], ...[1; 36]]) else result fi
    result = if length == 10 then pack128([...[0; 88], ...[1; 40]]) else result fi
    result = if length == 11 then pack128([...[0; 84], ...[1; 44]]) else result fi
    result = if length == 12 then pack128([...[0; 80], ...[1; 48]]) else result fi
    result = if length == 13 then pack128([...[0; 76], ...[1; 52]]) else result fi
    result = if length == 14 then pack128([...[0; 72], ...[1; 56]]) else result fi
    result = if length == 15 then pack128([...[0; 68], ...[1; 60]]) else result fi
    result = if length == 16 then pack128([...[0; 64], ...[1; 64]]) else result fi
    result = if length == 17 then pack128([...[0; 60], ...[1; 68]]) else result fi
    result = if length == 18 then pack128([...[0; 56], ...[1; 72]]) else result fi
    result = if length == 19 then pack128([...[0; 52], ...[1; 76]]) else result fi
    result = if length == 20 then pack128([...[0; 48], ...[1; 80]]) else result fi
    result = if length == 21 then pack128([...[0; 44], ...[1; 84]]) else result fi
    result = if length == 22 then pack128([...[0; 40], ...[1; 88]]) else result fi
    result = if length == 23 then pack128([...[0; 36], ...[1; 92]]) else result fi
    result = if length == 24 then pack128([...[0; 32], ...[1; 96]]) else result fi
    result = if length == 25 then pack128([...[0; 28], ...[1; 100]]) else result fi
    result = if length == 26 then pack128([...[0; 24], ...[1; 104]]) else result fi
    result = if length == 27 then pack128([...[0; 20], ...[1; 108]]) else result fi
    result = if length == 28 then pack128([...[0; 16], ...[1; 112]]) else result fi
    result = if length == 29 then pack128([...[0; 12], ...[1; 116]]) else result fi
    result = if length == 30 then pack128([...[0; 8], ...[1; 120]]) else result fi
    result = if length == 31 then pack128([...[0; 4], ...[1; 124]]) else result fi
    result = if length == 32 then pack128([1; 128]) else result fi
return result

def packTarget(field[32] bits) -> (field):
    field result = \
    if pack128([...[0; 120], ...bits[0..8]]) == 23 then pack128([...[0; 72], ...bits[8..32], ...[0; 32]]) else \
      if pack128([...[0; 120], ...bits[0..8]]) == 24 then pack128([...[0; 64], ...bits[8..32], ...[0; 40]]) else \
        if pack128([...[0; 120], ...bits[0..8]]) == 25 then pack128([...[0; 56], ...bits[8..32], ...[0; 48]]) else \
          if pack128([...[0; 120], ...bits[0..8]]) == 26 then pack128([...[0; 48], ...bits[8..32], ...[0; 56]]) else \
            if pack128([...[0; 120], ...bits[0..8]]) == 27 then pack128([...[0; 40], ...bits[8..32], ...[0; 64]]) else \
              if pack128([...[0; 120], ...bits[0..8]]) == 28 then pack128([...[0; 32], ...bits[8..32], ...[0; 72]]) else \
                if pack128([...[0; 120], ...bits[0..8]]) == 29 then pack128([...[0; 24], ...bits[8..32], ...[0; 80]]) else \
                  if pack128([...[0; 120], ...bits[0..8]]) == 30 then pack128([...[0; 16], ...bits[8..32], ...[0; 88]]) else \
                    if pack128([...[0; 120], ...bits[0..8]]) == 31 then pack128([...[0; 8], ...bits[8..32], ...[0; 96]]) else \
                    pack128([0; 128]) fi \
                  fi \
                fi \
              fi \
            fi \
          fi \
        fi \
      fi \
    fi
return result

def get_bit_length_bits(field[24] bits) -> (field):
    field result = 0
    for field i in 0..24 do
        result = if (result == 0) && (bits[i] == 1) then 24-i else result fi
    endfor
return result

def get_hex_length_bits(field[24] bits) -> (field):
    field bit_length = get_bit_length_bits(bits)
    field result = 0
    result = if bit_length > 0 then 1 else result fi
    result = if bit_length > 4 then 2 else result fi
    result = if bit_length > 8 then 3 else result fi
    result = if bit_length > 12 then 4 else result fi
    result = if bit_length > 16 then 5 else result fi
    result = if bit_length > 20 then 6 else result fi
return result

// call with last field of block array
def validate_target(field epoch_head, field epoch_tail, field next_epoch_head) -> (field[2]):
    epoch_head_unpacked = unpack128(epoch_head)
    epoch_tail_unpacked = unpack128(epoch_tail)
    next_epoch_head_unpacked = unpack128(next_epoch_head)
    time_head = pack128([...[0; 96], ...toBigEndian(epoch_head_unpacked[32..64])])
    time_tail = pack128([...[0; 96], ...toBigEndian(epoch_tail_unpacked[32..64])])

    current_target = packTarget(toBigEndian(epoch_head_unpacked[64..96]))
    field time_delta = time_tail - time_head
    field target_time_delta = 1209600 // 2016 * 600 (time interval of 10 minutes)

    field target = current_target * time_delta // target_time_delta

    field encoded_target = packTarget(toBigEndian(next_epoch_head_unpacked[64..96]))
    field encoded_target_extended = encoded_target * target_time_delta

    // The encoding of targets uses a floor function, the comparison of a calculated target may therefore fail
    // Therefore, a maximum variance is calculated that is one hex digit in the encoding
    field maxVariance = packMaxVariance(getHexLength(target)-get_hex_length_bits(toBigEndian(next_epoch_head_unpacked[64..88])))
    // int('ffff' + 10 * '00', 16) * 2016 * 600 = 95832923060582736897701037735936000
    target = if target > 95832923060582736897701037735936000 then 95832923060582736897701037735936000 else target fi
    field delta = target - encoded_target_extended
    delta = if target >= encoded_target_extended then delta else maxVariance + 1 fi
    field valid = if delta <= maxVariance then 1 else 0 fi
    //field valid = if (37202390668975264121251936602161152-81015268229227203625641762304819200) < 1267650600228229401496703205375 then 1 else 0 fi
return [valid, current_target]

def hash_block_header(field[5] preimage) -> (field[2]):
    a = unpack128(preimage[0])
    b = unpack128(preimage[1])
    c = unpack128(preimage[2])
    d = unpack128(preimage[3])
    e = unpack128(preimage[4])

    field[256] preimage1 = [...a, ...b]
    field[256] preimage2 = [...c, ...d]
    field[256] preimage3 = [...[...e, 1], ...[0; 127]]
    field[256] dummy = [...[0; 246], ...[1, 0, 1, 0, 0, 0, 0, 0, 0, 0]] //second array indicates length of preimage = 640bit

    intermediary = sha256for1024(preimage1, preimage2, preimage3, dummy)

    r = sha256only(intermediary)

    res0 = pack128(r[0..128])
    res1 = pack128(r[128..256])

return [res0, res1]


def validate_block_header(field reference_target, field[2] prev_block_hash, field[5] preimage) -> (field[3]):
	a = unpack128(preimage[0])
	b = unpack128(preimage[1])
	c = unpack128(preimage[2])
	d = unpack128(preimage[3])
	e = unpack128(preimage[4])

    encoded_prev_block_hash1 = pack128([...a[32..128], ...b[0..32]])
    encoded_prev_block_hash2 = pack128([...b[32..128], ...c[0..32]])
    field valid = if encoded_prev_block_hash1 == prev_block_hash[0] && encoded_prev_block_hash2 == prev_block_hash[1] \
        then 1 else 0 fi

    // converting to big endian is not necessary here, as reference target is encoded little endian
    field current_target = pack128([...[0; 96], ...e[64..96]])
    valid = if valid == 1 && current_target == reference_target then 1 else 0 fi

    field[256] preimage1 = [...a, ...b]
    field[256] preimage2 = [...c, ...d]
    field[256] preimage3 = [...[...e, 1], ...[0; 127]]
    field[256] dummy = [...[0; 246], ...[1, 0, 1, 0, 0, 0, 0, 0, 0, 0]] //second array indicates length of preimage = 640bit

    intermediary = sha256for1024(preimage1, preimage2, preimage3, dummy)

    r = sha256only(intermediary)

    res0 = pack128(r[0..128])
    res1 = pack128(r[128..256])

    target = packTarget(toBigEndian(e[64..96]))

    valid = if valid == 1 && target > pack128(toBigEndian(r[128..256])) then 1 else 0 fi

return [valid, res0, res1]
//return [valid, target, pack128(toBigEndian(r[128..256]))] //output for test purposes


def main(field first_block_epoch, field[2] prev_block_hash, private field[310] intermediate_blocks, field[5] final_block) -> (field[5]):
    unpacked_raw_target = unpack128(first_block_epoch)
    // converting to big endian is not necessary here, as it is compared to a little endian encoding
    // it is not used for calculations
    field reference_target = pack128([...[0; 96], ...unpacked_raw_target[64..96]])
    field result = 1
    block1 = validate_block_header(reference_target, prev_block_hash, intermediate_blocks[0..5])
    result = if block1[0] == 0 || result == 0 then 0 else 1 fi
    block2 = validate_block_header(reference_target, block1[1..3], intermediate_blocks[5..10])
    result = if block2[0] == 0 || result == 0 then 0 else 1 fi
    block3 = validate_block_header(reference_target, block2[1..3], intermediate_blocks[10..15])
    result = if block3[0] == 0 || result == 0 then 0 else 1 fi
    block4 = validate_block_header(reference_target, block3[1..3], intermediate_blocks[15..20])
    result = if block4[0] == 0 || result == 0 then 0 else 1 fi
    block5 = validate_block_header(reference_target, block4[1..3], intermediate_blocks[20..25])
    result = if block5[0] == 0 || result == 0 then 0 else 1 fi
    block6 = validate_block_header(reference_target, block5[1..3], intermediate_blocks[25..30])
    result = if block6[0] == 0 || result == 0 then 0 else 1 fi
    block7 = validate_block_header(reference_target, block6[1..3], intermediate_blocks[30..35])
    result = if block7[0] == 0 || result == 0 then 0 else 1 fi
    block8 = validate_block_header(reference_target, block7[1..3], intermediate_blocks[35..40])
    result = if block8[0] == 0 || result == 0 then 0 else 1 fi
    block9 = validate_block_header(reference_target, block8[1..3], intermediate_blocks[40..45])
    result = if block9[0] == 0 || result == 0 then 0 else 1 fi
    block10 = validate_block_header(reference_target, block9[1..3], intermediate_blocks[45..50])
    result = if block10[0] == 0 || result == 0 then 0 else 1 fi
    block11 = validate_block_header(reference_target, block10[1..3], intermediate_blocks[50..55])
    result = if block11[0] == 0 || result == 0 then 0 else 1 fi
    block12 = validate_block_header(reference_target, block11[1..3], intermediate_blocks[55..60])
    result = if block12[0] == 0 || result == 0 then 0 else 1 fi
    block13 = validate_block_header(reference_target, block12[1..3], intermediate_blocks[60..65])
    result = if block13[0] == 0 || result == 0 then 0 else 1 fi
    block14 = validate_block_header(reference_target, block13[1..3], intermediate_blocks[65..70])
    result = if block14[0] == 0 || result == 0 then 0 else 1 fi
    block15 = validate_block_header(reference_target, block14[1..3], intermediate_blocks[70..75])
    result = if block15[0] == 0 || result == 0 then 0 else 1 fi
    block16 = validate_block_header(reference_target, block15[1..3], intermediate_blocks[75..80])
    result = if block16[0] == 0 || result == 0 then 0 else 1 fi
    block17 = validate_block_header(reference_target, block16[1..3], intermediate_blocks[80..85])
    result = if block17[0] == 0 || result == 0 then 0 else 1 fi
    block18 = validate_block_header(reference_target, block17[1..3], intermediate_blocks[85..90])
    result = if block18[0] == 0 || result == 0 then 0 else 1 fi
    block19 = validate_block_header(reference_target, block18[1..3], intermediate_blocks[90..95])
    result = if block19[0] == 0 || result == 0 then 0 else 1 fi
    block20 = validate_block_header(reference_target, block19[1..3], intermediate_blocks[95..100])
    result = if block20[0] == 0 || result == 0 then 0 else 1 fi
    block21 = validate_block_header(reference_target, block20[1..3], intermediate_blocks[100..105])
    result = if block21[0] == 0 || result == 0 then 0 else 1 fi
    block22 = validate_block_header(reference_target, block21[1..3], intermediate_blocks[105..110])
    result = if block22[0] == 0 || result == 0 then 0 else 1 fi
    block23 = validate_block_header(reference_target, block22[1..3], intermediate_blocks[110..115])
    result = if block23[0] == 0 || result == 0 then 0 else 1 fi
    block24 = validate_block_header(reference_target, block23[1..3], intermediate_blocks[115..120])
    result = if block24[0] == 0 || result == 0 then 0 else 1 fi
    block25 = validate_block_header(reference_target, block24[1..3], intermediate_blocks[120..125])
    result = if block25[0] == 0 || result == 0 then 0 else 1 fi
    block26 = validate_block_header(reference_target, block25[1..3], intermediate_blocks[125..130])
    result = if block26[0] == 0 || result == 0 then 0 else 1 fi
    block27 = validate_block_header(reference_target, block26[1..3], intermediate_blocks[130..135])
    result = if block27[0] == 0 || result == 0 then 0 else 1 fi
    block28 = validate_block_header(reference_target, block27[1..3], intermediate_blocks[135..140])
    result = if block28[0] == 0 || result == 0 then 0 else 1 fi
    block29 = validate_block_header(reference_target, block28[1..3], intermediate_blocks[140..145])
    result = if block29[0] == 0 || result == 0 then 0 else 1 fi
    block30 = validate_block_header(reference_target, block29[1..3], intermediate_blocks[145..150])
    result = if block30[0] == 0 || result == 0 then 0 else 1 fi
    block31 = validate_block_header(reference_target, block30[1..3], intermediate_blocks[150..155])
    result = if block31[0] == 0 || result == 0 then 0 else 1 fi
    block32 = validate_block_header(reference_target, block31[1..3], intermediate_blocks[155..160])
    result = if block32[0] == 0 || result == 0 then 0 else 1 fi
    block33 = validate_block_header(reference_target, block32[1..3], intermediate_blocks[160..165])
    result = if block33[0] == 0 || result == 0 then 0 else 1 fi
    block34 = validate_block_header(reference_target, block33[1..3], intermediate_blocks[165..170])
    result = if block34[0] == 0 || result == 0 then 0 else 1 fi
    block35 = validate_block_header(reference_target, block34[1..3], intermediate_blocks[170..175])
    result = if block35[0] == 0 || result == 0 then 0 else 1 fi
    block36 = validate_block_header(reference_target, block35[1..3], intermediate_blocks[175..180])
    result = if block36[0] == 0 || result == 0 then 0 else 1 fi
    block37 = validate_block_header(reference_target, block36[1..3], intermediate_blocks[180..185])
    result = if block37[0] == 0 || result == 0 then 0 else 1 fi
    block38 = validate_block_header(reference_target, block37[1..3], intermediate_blocks[185..190])
    result = if block38[0] == 0 || result == 0 then 0 else 1 fi
    block39 = validate_block_header(reference_target, block38[1..3], intermediate_blocks[190..195])
    result = if block39[0] == 0 || result == 0 then 0 else 1 fi
    block40 = validate_block_header(reference_target, block39[1..3], intermediate_blocks[195..200])
    result = if block40[0] == 0 || result == 0 then 0 else 1 fi
    block41 = validate_block_header(reference_target, block40[1..3], intermediate_blocks[200..205])
    result = if block41[0] == 0 || result == 0 then 0 else 1 fi
    block42 = validate_block_header(reference_target, block41[1..3], intermediate_blocks[205..210])
    result = if block42[0] == 0 || result == 0 then 0 else 1 fi
    block43 = validate_block_header(reference_target, block42[1..3], intermediate_blocks[210..215])
    result = if block43[0] == 0 || result == 0 then 0 else 1 fi
    block44 = validate_block_header(reference_target, block43[1..3], intermediate_blocks[215..220])
    result = if block44[0] == 0 || result == 0 then 0 else 1 fi
    block45 = validate_block_header(reference_target, block44[1..3], intermediate_blocks[220..225])
    result = if block45[0] == 0 || result == 0 then 0 else 1 fi
    block46 = validate_block_header(reference_target, block45[1..3], intermediate_blocks[225..230])
    result = if block46[0] == 0 || result == 0 then 0 else 1 fi
    block47 = validate_block_header(reference_target, block46[1..3], intermediate_blocks[230..235])
    result = if block47[0] == 0 || result == 0 then 0 else 1 fi
    block48 = validate_block_header(reference_target, block47[1..3], intermediate_blocks[235..240])
    result = if block48[0] == 0 || result == 0 then 0 else 1 fi
    block49 = validate_block_header(reference_target, block48[1..3], intermediate_blocks[240..245])
    result = if block49[0] == 0 || result == 0 then 0 else 1 fi
    block50 = validate_block_header(reference_target, block49[1..3], intermediate_blocks[245..250])
    result = if block50[0] == 0 || result == 0 then 0 else 1 fi
    block51 = validate_block_header(reference_target, block50[1..3], intermediate_blocks[250..255])
    result = if block51[0] == 0 || result == 0 then 0 else 1 fi
    block52 = validate_block_header(reference_target, block51[1..3], intermediate_blocks[255..260])
    result = if block52[0] == 0 || result == 0 then 0 else 1 fi
    block53 = validate_block_header(reference_target, block52[1..3], intermediate_blocks[260..265])
    result = if block53[0] == 0 || result == 0 then 0 else 1 fi
    block54 = validate_block_header(reference_target, block53[1..3], intermediate_blocks[265..270])
    result = if block54[0] == 0 || result == 0 then 0 else 1 fi
    block55 = validate_block_header(reference_target, block54[1..3], intermediate_blocks[270..275])
    result = if block55[0] == 0 || result == 0 then 0 else 1 fi
    block56 = validate_block_header(reference_target, block55[1..3], intermediate_blocks[275..280])
    result = if block56[0] == 0 || result == 0 then 0 else 1 fi
    block57 = validate_block_header(reference_target, block56[1..3], intermediate_blocks[280..285])
    result = if block57[0] == 0 || result == 0 then 0 else 1 fi
    block58 = validate_block_header(reference_target, block57[1..3], intermediate_blocks[285..290])
    result = if block58[0] == 0 || result == 0 then 0 else 1 fi
    block59 = validate_block_header(reference_target, block58[1..3], intermediate_blocks[290..295])
    result = if block59[0] == 0 || result == 0 then 0 else 1 fi
    block60 = validate_block_header(reference_target, block59[1..3], intermediate_blocks[295..300])
    result = if block60[0] == 0 || result == 0 then 0 else 1 fi
    block61 = validate_block_header(reference_target, block60[1..3], intermediate_blocks[300..305])
    result = if block61[0] == 0 || result == 0 then 0 else 1 fi
    block62 = validate_block_header(reference_target, block61[1..3], intermediate_blocks[305..310])
    result = if block62[0] == 0 || result == 0 then 0 else 1 fi
    e = unpack128(final_block[4]) //TODO: Clean up, dirty mirty
    block63 = validate_block_header(pack128([...[0; 96], ...e[64..96]]), block62[1..3], final_block)
    result = if block63[0] == 0 || result == 0 then 0 else 1 fi

    target_is_valid = validate_target(first_block_epoch, intermediate_blocks[309], final_block[4])
return [result, target_is_valid[0], ...block63[1..3], target_is_valid[1]]
